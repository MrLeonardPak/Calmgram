name: CI Application Server
on:
  # Triggers the workflow on push to api_server branch or pull request to main/intergration branch 
  push:
    branches: [ api_server_14_05 ]
  pull_request:
    branches: [ main, integration ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential clang-tidy-12 clang-format-12
      - name: CMake with option for tests
        run: |
          cd api_server
          mkdir build
          cd build
          cmake -DTESTS=OFF -DSTATIC_CHECKS=ON -DSANITIZE=OFF ..
      - name: Code Style
        run: |
          cd api_server/build 
          make clang-format
      - name: Make
        run: |
          cd api_server/build 
          make -j$(nproc)
  tests-valgrind:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential valgrind
      - name: CMake with option for tests
        run: |
          cd api_server
          mkdir build
          cd build
          cmake -DTESTS=ON -DSTATIC_CHECKS=OFF -DSANITIZE=OFF ..
      - name: Make
        run: |
          cd api_server/build 
          make -j$(nproc)
      - name: TESTS
        run: |
          cd api_server/build 
          make run_tests_with_valgrind
  tests-sanitize:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
      - name: CMake with option for tests
        run: |
          cd api_server
          mkdir build
          cd build
          cmake -DTESTS=ON -DSTATIC_CHECKS=OFF -DSANITIZE=ON ..
      - name: Make
        run: |
          cd api_server/build 
          make -j$(nproc)
      - name: TESTS
        run: |
          cd api_server/build
          make run_tests
